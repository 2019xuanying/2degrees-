import requests
import json
import time
from concurrent.futures import ThreadPoolExecutor, as_completed

def find_quadruple_digits(numbers):
    """
    检查号码列表中是否存在尾号为四位相同数字的电话号码。
    例如: ...8888, ...9999。

    参数:
    numbers (list): 电话号码字符串列表。

    返回:
    str: 找到的第一个符合条件的号码，如果找不到则返回 None。
    """
    for number in numbers:
        # 获取号码的后四位
        last_four = number[-4:]
        # 检查这四位数字是否全部相同
        if len(set(last_four)) == 1:
            return number
    return None

def find_consecutive_digits(numbers):
    """
    检查号码列表中是否存在包含连续或反向连续数字序列的电话号码。
    例如: ...1234..., ...5678..., ...4321..., ...8765...。
    序列长度要求大于等于4位。

    参数:
    numbers (list): 电话号码字符串列表。

    返回:
    str: 找到的第一个符合条件的号码，如果找不到则返回 None。
    """
    for number in numbers:
        # 遍历电话号码的每一个可能的起始位置
        for i in range(len(number) - 3):
            sub_sequence = number[i:i+4]
            # 检查是否为正向连续数字
            is_consecutive_up = True
            for j in range(3):
                if int(sub_sequence[j+1]) - int(sub_sequence[j]) != 1:
                    is_consecutive_up = False
                    break
            if is_consecutive_up:
                return number

            # 检查是否为反向连续数字
            is_consecutive_down = True
            for j in range(3):
                if int(sub_sequence[j]) - int(sub_sequence[j+1]) != 1:
                    is_consecutive_down = False
                    break
            if is_consecutive_down:
                return number
            
    return None

def fetch_numbers(url, headers, payload):
    """
    向服务器发起单个请求并返回电话号码列表或 None。
    这个函数将被多个线程同时调用。
    """
    try:
        response = requests.post(url, headers=headers, json=payload, timeout=10)
        response.raise_for_status()
        data = response.json()
        if "availableServiceEntities" in data and data["availableServiceEntities"]:
            return [item["serviceEntity"] for item in data["availableServiceEntities"]]
    except requests.exceptions.RequestException as e:
        print(f"请求失败: {e}")
    except json.JSONDecodeError:
        print("响应内容不是有效的JSON格式。")
    return None

def main():
    """
    主函数，使用多线程并发发起请求，并筛选电话号码。
    """
    url = "https://api.2degrees.nz/sales/v3/qualification/voice/availablePhoneNumbers"
    
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0",
        "Accept": "*/*",
        "Content-Type": "application/json",
        "Origin": "https://prepay-checkout.2degrees.nz",
        "Referer": "https://prepay-checkout.2degrees.nz/",
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "same-site",
        "correlationid": "checkout-v2-20250913171615-E8E7F7H53YK05EZ0",
        "traceparent": "00-f522183df08b4cecaad9eba63161dcb4-b4ecadadedf68f1c-01",
        "tracestate": "x-td.app=checkout-v2",
        "x-request-guid": "890d9698-4719-46f2-a3da-18723305d2d9"
    }
    
    payload = {
        "additionalProductKey": "mobile2_linerental",
        "numberType": "MobileV2",
        "orderToken": "e8abbefb-66a1-4f9d-bc8b-30e8f894a234",
        "count": 6,
        "businessGroup": "2dPrepay"
    }

    attempt_count = 0
    # 使用 ThreadPoolExecutor 管理10个线程
    with ThreadPoolExecutor(max_workers=10) as executor:
        while True:
            attempt_count += 1
            print(f"--- 正在进行第 {attempt_count} 批尝试 (并发10个请求) ---")
            
            # 提交10个并发任务到线程池
            futures = [executor.submit(fetch_numbers, url, headers, payload) for _ in range(10)]
            
            found_number = None
            for future in as_completed(futures):
                phone_numbers = future.result()
                if phone_numbers:
                    print(f"已获取 {len(phone_numbers)} 个电话号码：{phone_numbers}")

                    # 优先寻找尾号四位相同的号码
                    found_number = find_quadruple_digits(phone_numbers)
                    if found_number:
                        break  # 如果找到，跳出内部循环

                    # 如果没有，则寻找包含四位连续数字的号码
                    found_number = find_consecutive_digits(phone_numbers)
                    if found_number:
                        break # 如果找到，跳出内部循环
            
            if found_number:
                print(f"\n找到一个符合条件的号码。")
                choice = input("是否继续扫描？(y/n): ").lower()
                if choice != 'y':
                    print("程序退出。")
                    break
                else:
                    print("继续扫描...")
            else:
                print("本轮未找到符合条件的号码，5秒后重新尝试下一批请求...")
                time.sleep(5)
                
if __name__ == "__main__":
    main()
